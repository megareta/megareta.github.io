if("serviceWorker"in navigator){window.addEventListener("load",function(){navigator.serviceWorker.register("/service-worker.js",{scope:"/"}).then(function(reg){if(typeof workpad_key!=="undefined"){push_updateSubscription()}}).catch(function(error){changePushButtonState("incompatible");console.log("Service worker registration failed, error:",error)})})}else{console.log("Navigator does not support serviceWorker object.")}var deferredPrompt=null;window.addEventListener("appinstalled",function(e){window.localStorage.setItem("installed",true)});window.addEventListener("beforeinstallprompt",function(e){e.preventDefault();deferredPrompt=getDeferredPrompt(e)});self.addEventListener("push",function(event){console.log("[Service Worker] Push Received.");console.log(`[Service Worker] Push had this data: "${event.data.text()}"`);const title="Push Codelab";const options={body:"Yay it works.",icon:"images/icon.png",badge:"images/badge.png"};event.waitUntil(self.registration.showNotification(title,options))});function installWorkpadPWA(){console.log("installWorkpadPWA start");if(deferredPrompt){deferredPrompt.prompt();console.log(deferredPrompt);deferredPrompt.userChoice.then(function(choiceResult){if(choiceResult.outcome==="accepted"){console.log("Your Microsite has been installed chrome class added");modalClose();if(typeof logEvent==="function"){console.log("calling logEvent for NAV_INSTALL w_id,g_id",W["id"],$("body").data("gallery_id"));logEvent("NAV_INSTALL",null)}window.location.hash="";window.location.reload()}else{console.log("User chose to not install your Microsite")}deferredPrompt=null})}else{console.log("no deferred prompt: installed=",window.localStorage.getItem("installed"));var errorClass=window.localStorage.getItem("installed")?"pwa-error-already-installed":"pwa-error-unknown";$("body").addClass("pwa-error").addClass(errorClass)}}function isStandalone(){return window.matchMedia("(display-mode: standalone)").matches||window.navigator.standalone}function getDeferredPrompt(e){if(isStandalone()){return false}return e}var isPushEnabled=false;const pushButton=$("#push-subscription-button").get(0);if(DEV&&!pushButton)console.warn("Can't find pushButton dom element");$(document).on("click",".action-push-subscribe",function(){if(isPushEnabled){modalOpen("push-unsubscribe")}else{if(push_subscribe()){modalToast(LANG_PWA_SUBSCRIBED)}}return true});if(!("serviceWorker"in navigator)){if(DEV)console.warn("Service workers are not supported by this browser");changePushButtonState("incompatible")}if(!("PushManager"in window)){if(DEV)console.warn("Push notifications are not supported by this browser");changePushButtonState("incompatible")}if(!("showNotification"in ServiceWorkerRegistration.prototype)){if(DEV)console.warn("Notifications are not supported by this browser");changePushButtonState("incompatible")}if(typeof Notification!=="undefined"&&Notification.permission==="denied"){if(DEV)console.warn("Notifications are denied by the user");changePushButtonState("incompatible")}function changePushButtonState(state){if(typeof pushButton==="undefined"||!pushButton){return}$(pushButton).removeClass("enabled disabled computing incompatible").addClass(state);switch(state){case"enabled":pushButton.disabled=false;isPushEnabled=true;$(pushButton).data("event-type","NAV_PUSH_UNSUBSCRIBE");break;case"disabled":pushButton.disabled=false;isPushEnabled=false;break;case"computing":pushButton.disabled=true;break;case"incompatible":pushButton.disabled=true;break;default:if(DEV)console.error("Unhandled push button state",state);break}}function urlBase64ToUint8Array(base64String){const padding="=".repeat((4-base64String.length%4)%4);const base64=(base64String+padding).replace(/\-/g,"+").replace(/_/g,"/");const rawData=window.atob(base64);const outputArray=new Uint8Array(rawData.length);for(let i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i)}return outputArray}function checkNotificationPermission(){return new Promise((resolve,reject)=>{if(Notification.permission==="denied"){return reject(new Error("Push messages are blocked."))}if(Notification.permission==="granted"){return resolve()}if(Notification.permission==="default"){return Notification.requestPermission().then(result=>{if(result!=="granted"){reject(new Error("Bad permission result"))}resolve()})}})}function push_subscribe(){changePushButtonState("computing");return checkNotificationPermission().then(()=>navigator.serviceWorker.ready).then(serviceWorkerRegistration=>serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:urlBase64ToUint8Array(VAPID_PUBLIC_KEY)})).then(subscription=>{return push_sendSubscriptionToServer(subscription,"POST",workpad_key)}).then(subscription=>subscription&&changePushButtonState("enabled")).catch(e=>{if(Notification.permission==="denied"){console.warn("Notifications are denied by the user.");changePushButtonState("incompatible")}else{console.error("Impossible to subscribe to push notifications",e);changePushButtonState("disabled")}})}function push_updateSubscription(){navigator.serviceWorker.ready.then(serviceWorkerRegistration=>serviceWorkerRegistration.pushManager.getSubscription()).then(subscription=>{changePushButtonState("disabled");if(!subscription){return}return push_sendSubscriptionToServer(subscription,"PUT",workpad_key)}).then(subscription=>subscription&&changePushButtonState("enabled")).catch(e=>{console.log("Error when updating the subscription",e)})}function push_unsubscribe(workpadKey){changePushButtonState("computing");navigator.serviceWorker.ready.then(serviceWorkerRegistration=>serviceWorkerRegistration.pushManager.getSubscription()).then(subscription=>{if(!subscription){changePushButtonState("disabled");return}return push_sendSubscriptionToServer(subscription,"DELETE",workpadKey).then(subscription=>{var msg=workpadKey?"You have been unsubscribed from notifications for this microite.":"You have been unsubscribed from all notifications.";modalToast(msg)})}).then(subscription=>subscription&&subscription.unsubscribe()).then(()=>changePushButtonState("disabled")).catch(e=>{console.error("Error when unsubscribing the user",e);changePushButtonState("disabled")})}function push_sendSubscriptionToServer(subscription,method,workpadKey){const key=subscription.getKey("p256dh");const token=subscription.getKey("auth");const contentEncoding=(PushManager.supportedContentEncodings||["aesgcm"])[0];return fetch("/pwa/pwa/subscription/"+workpadKey,{method:method,body:JSON.stringify({endpoint:subscription.endpoint,publicKey:key?btoa(String.fromCharCode.apply(null,new Uint8Array(key))):null,authToken:token?btoa(String.fromCharCode.apply(null,new Uint8Array(token))):null,contentEncoding:contentEncoding})}).then(response=>response.json().then(data=>data.data.subscribed==="1"?subscription:false))}
